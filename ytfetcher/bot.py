from __future__ import annotations

import asyncio
import logging
import os
import re
import shutil
from dataclasses import dataclass
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Dict, Literal, Tuple
from urllib.parse import quote
from uuid import uuid4

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from telegram.error import BadRequest
from yt_dlp import YoutubeDL
from yt_dlp.utils import DownloadError

QualityChoice = Literal["medium", "high", "audio"]

URL_PATTERN = re.compile(r"(https?://\S+)")

BUTTONS: Dict[QualityChoice, str] = {
    "medium": "üé¨ –°—Ä–µ–¥–Ω–µ–µ",
    "high": "üéûÔ∏è –í—ã—Å–æ–∫–æ–µ",
    "audio": "üéß –ê—É–¥–∏–æ",
}

DOWNLOAD_ROOT = Path(os.getenv("DOWNLOAD_ROOT", "/srv/ytfetcher/downloads"))
DOWNLOAD_ROOT.mkdir(parents=True, exist_ok=True)
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")


@dataclass
class DownloadResult:
    file_path: Path
    info: Dict[str, object]
    media_kind: str


def build_application(token: str) -> Application:
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    app.add_handler(CallbackQueryHandler(handle_quality))
    return app


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
    )


async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return
    text = update.message.text or ""
    match = URL_PATTERN.search(text)
    if not match:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é URL.")
        return

    url = match.group(1)
    context.user_data["pending_url"] = url
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(label, callback_data=choice)
                for choice, label in BUTTONS.items()
            ]
        ]
    )
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=keyboard
    )


async def handle_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        return

    await query.answer()
    choice = query.data
    if choice not in BUTTONS:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞.")
        return

    url = context.user_data.get("pending_url")
    if not url:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return

    message = query.message
    if not message:
        return

    await message.edit_reply_markup(reply_markup=None)
    status_msg = await message.reply_text("–°–∫–∞—á–∏–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

    try:
        result = await download_with_yt_dlp(url, choice)  # type: ignore[arg-type]
    except DownloadError as exc:
        logging.exception("Download failed: %s", exc)
        await status_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
        context.user_data.pop("pending_url", None)
        return
    except Exception as exc:  # pragma: no cover - defensive logging
        logging.exception("Unexpected error: %s", exc)
        await status_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        context.user_data.pop("pending_url", None)
        return

    file_size = result.file_path.stat().st_size
    title = result.info.get("title", "–§–∞–π–ª")

    link = build_public_link(result.file_path)
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=link)]]
    )
    text = (
        "–ì–æ—Ç–æ–≤–æ!\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–†–∞–∑–º–µ—Ä: {humanize_size(file_size)}\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å."
    )

    try:
        await status_msg.edit_text(text, reply_markup=keyboard)
    except BadRequest as exc:
        logging.warning("Failed to send button link, falling back to plain text: %s", exc)
        await status_msg.edit_text(
            text + f"\n–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {link}", reply_markup=None
        )

    context.user_data.pop("pending_url", None)


def build_public_link(file_path: Path) -> str:
    if not PUBLIC_BASE_URL:
        raise RuntimeError("PUBLIC_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –±–∞–∑–æ–≤—ã–π URL –¥–æ—Å—Ç—É–ø–∞ –∫ nginx.")
    base = PUBLIC_BASE_URL.rstrip("/")
    return f"{base}/downloads/{quote(file_path.name)}"


def _yt_dlp_options(directory: str, choice: QualityChoice) -> Dict[str, object]:
    base: Dict[str, object] = {
        "outtmpl": str(Path(directory) / "%(id)s.%(ext)s"),
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        "merge_output_format": "mp4",
    }
    if choice == "medium":
        base["format"] = "bv*[height<=720]+ba/b[height<=720]/best[height<=720]"
    elif choice == "high":
        base["format"] = "bv*+ba/best"
    else:
        base["format"] = "bestaudio/best"
        base["postprocessors"] = [
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }
        ]
        base["merge_output_format"] = "mp3"
    return base


def _run_download(url: str, choice: QualityChoice, directory: str) -> Tuple[Path, Dict[str, object], str]:
    options = _yt_dlp_options(directory, choice)
    with YoutubeDL(options) as ydl:
        info = ydl.extract_info(url, download=True)

    files = sorted(Path(directory).glob("*"), key=lambda p: p.stat().st_mtime)
    if not files:
        raise DownloadError("yt-dlp did not produce output.")

    media_kind = "audio" if choice == "audio" else "video"
    return files[-1], info, media_kind


async def download_with_yt_dlp(url: str, choice: QualityChoice) -> DownloadResult:
    loop = asyncio.get_running_loop()
    temp_dir = TemporaryDirectory()

    def task() -> DownloadResult:
        file_path, info, media_kind = _run_download(url, choice, temp_dir.name)
        extension = file_path.suffix or (".mp3" if media_kind == "audio" else ".mp4")
        target_name = build_filename(info, media_kind, extension)
        target_path = DOWNLOAD_ROOT / target_name
        shutil.move(str(file_path), target_path)
        return DownloadResult(target_path, info, media_kind)

    try:
        return await loop.run_in_executor(None, task)
    finally:
        temp_dir.cleanup()


def humanize_size(num_bytes: int) -> str:
    size = float(num_bytes)
    for unit in ("–ë", "–ö–ë", "–ú–ë", "–ì–ë"):
        if size < 1024 or unit == "–ì–ë":
            text = f"{size:.1f}".rstrip("0").rstrip(".")
            return f"{text} {unit}"
        size /= 1024
    return f"{size:.1f} –ì–ë"  # fallback


def build_filename(info: Dict[str, object], media_kind: str, extension: str) -> str:
    title = str(info.get("title") or "")
    base = sanitize_filename(title) or media_kind
    suffix = uuid4().hex[:8]
    return f"{base}_{suffix}{extension}"


def sanitize_filename(value: str, max_length: int = 80) -> str:
    value = value.strip()
    if not value:
        return ""
    value = re.sub(r"\s+", "_", value)
    value = re.sub(r"[^\w.-]", "_", value, flags=re.UNICODE)
    value = re.sub(r"_+", "_", value)
    return value[:max_length].strip("._")
